#!/usr/bin/env node

/*
 * Copyright (c) 2018 One Hill Technologies, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const program = require ('commander');
const ModuleFinder = require ('../lib/module-finder');
const path = require ('path');
const fs = require ('fs-extra');
const { fromCallback } = require ('bluebird');

const CommandFinder = ModuleFinder.extend ({
  load () {
    const builtinCommandPaths = path.resolve (__dirname, '../cli/commands');

    return Promise.all ([
      this._includeCommands (builtinCommandPaths),
      this._super.call (this, ...arguments)
    ]).then (() => this);
  },

  callback (finder, modulePath) {
    // Determine if this module path has extensions for the command-line. We
    // are looking for the cli/commands path.
    const cliPath = path.resolve (modulePath, 'cli/commands');

    return fs.pathExists (cliPath)
      .then (exists => {
        if (exists)
          return this._includeCommands (cliPath);
      });
  },

  _includeCommands (dir) {
    return fromCallback (cb => fs.readdir (dir, cb))
      .then (files => files.reduce ((accum, file) => {
        const absPath = path.resolve (dir, file);
        const stats = fs.lstatSync (absPath);

        if (stats.isDirectory ())
          accum.push (require (absPath) ());

        return accum;
      }, []))
      .then (factoryMethods => factoryMethods.map (factoryMethod =>  factoryMethod.makeCommand ()))
      .then (commands => Promise.all (commands.map (command => Promise.resolve (command.configure ()).then (() => command))))
      .then (commands => commands.forEach (command => program.addCommand (command, command.options)));
  }
});

new CommandFinder ().load ().then (() => program.parse (process.argv));
